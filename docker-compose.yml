version: "2.4"
services:
  #Mongo
  mongodb:
    container_name: mongodb
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      SPRING_APPLICATION_NAME: mongodb
      SPRING_PROFILES_ACTIVE: prod
    healthcheck:
      #test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\").ok' --quiet | grep 1"]
      test: ["CMD-SHELL", "mongosh --eval 'db.runCommand({ ping: 1 })' --quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: on-failure
    networks:
      - rlb-net

    #Zookeeper
  zookeeper:
    hostname: zookeeper
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.6.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "ruok,stat"
    restart: on-failure
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo ruok | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - rlb-net
  #Kafka Server
  kafka:
    hostname: kafka
    container_name: kafka
    image: confluentinc/cp-kafka:7.6.0
    ports:
      - "9092:9092"    # intra-Docker traffic
      - "29092:29092"  # host-to-broker traffic
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # listeners on two different ports
      KAFKA_LISTENERS: |
        INTERNAL://0.0.0.0:9092,
        EXTERNAL://0.0.0.0:29092
      # advertise them appropriately
      KAFKA_ADVERTISED_LISTENERS: |
        INTERNAL://kafka:9092,
        EXTERNAL://localhost:29092
      # map your logical listener names to the PLAINTEXT protocol
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      # tell brokers to talk to each other on the INTERNAL listener
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms256M"
    restart: on-failure
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 120s
    networks:
      - rlb-net

  #Eureka server
  eureka-server:
    container_name: eureka-server
    build:
      context: ./eureka-server
    image: eureka-server:0.0.1
    ports:
      - "8761:8761"
    environment:
      SPRING_APPLICATION_NAME: eureka-server
      SPRING_PROFILES_ACTIVE: prod
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761 || exit 1"]
      interval: 10s
      retries: 5
      start_period: 120s
    networks:
      - rlb-net
  #RLB-Notification
  rlb-notification:
    container_name: rlb-notification
    build:
      context: ./rlb-notification
    image: rlb-notification:0.0.1
    ports:
      - "6060:6060"
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: rlb-notification
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    restart: on-failure
    networks:
      - rlb-net

  rlb-oc:
    container_name: rlb-oc
    build:
      context: ./rlb-oc
    image: rlb-oc:0.0.1
    ports:
      - "6061:6061"
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: rlb-oc
      SPRING_PROFILES_ACTIVE: prod
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    restart: on-failure
    networks:
      - rlb-net

networks:
  rlb-net:
    driver: bridge
